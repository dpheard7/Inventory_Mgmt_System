package Controllers;

import Model.InHousePart;
import Model.Inventory;
import Model.OutsourcedPart;
import Model.Part;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.stage.Stage;

import java.io.IOException;
import java.net.URL;
import java.util.Objects;
import java.util.Random;
import java.util.ResourceBundle;

/**
 * AddPart class which controls actions of the Add Part form. Generates unique part IDs for new parts.
 */
public class AddPart implements Initializable {

    Stage stage;
    Parent scene;
    Random randomID = new Random();
    boolean partMatch = true;
    boolean isInHouse = true;

    @FXML
    private RadioButton InHouseRadio;
    @FXML
    private RadioButton OutSourcedRadio;
    @FXML
    private TextField PartsIDField;
    @FXML
    private TextField PartsNameField;
    @FXML
    private TextField PartsInventoryField;
    @FXML
    private TextField PartsPriceField;
    @FXML
    private TextField PartsMaxField;
    @FXML
    private TextField PartsMachineIDField;
    @FXML
    private TextField PartsMinField;
    @FXML
    private Label PartLabelName;

    /**
     * Disables Parts ID field since IDs will be generated by the program itself
     */
    private void idDisabled () {
        PartsIDField.setEditable(false);
    }

    /**
     * Generates random 3-digit part number and ensures no duplicates with existing part numbers
     * @return random part ID generated by the application.
     */
    public int generatePartID() {
        int randomPartID;
        randomPartID = 1 + randomID.nextInt(999);

        for (Part part: Inventory.getAllParts()){
            if (part.getId() == randomPartID) {
                partMatch = true;
                generatePartID();
            }
        }
        return randomPartID;
    }

    /**
     * Radio button to select product sourcing and to determine future actions disependent on part sourcing.
     * @param event sets part sourcing as 'In-house'.
     */
    @FXML
    void onActionInHouseRadio(ActionEvent event) {
        if (InHouseRadio.isSelected()) {
            isInHouse = true;
            this.PartLabelName.setText("Machine ID");
        }
     }

    /**
     * Radio button to select product sourcing and to determine future actions dependent on part sourcing.
     * @param event sets part sourcing as 'Outsourced'.
     */
    @FXML
    void onActionOutsourcedRadio(ActionEvent event) {
        if (OutSourcedRadio.isSelected()) {
            isInHouse = false;
            this.PartLabelName.setText("Company Name");
        }
     }

    /**
     * Validates parts according to specified logical instructions.
     * @param name name of part
     * @param stock inventory level
     * @param max max inventory level
     * @param min min inventory level
     * @param companyName company name for outsourced product
     * @return status of validation check.
     */
    public boolean validateOutsourced(String name, int stock, int max, int min, String companyName) throws Exception {

        if (name.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Name field is blank.");
            alert.showAndWait();
            throw new NullPointerException();
        }

        if (min <= 0 || min >= max || stock < min || stock > max) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Stock minimum must be more than zero and less than stock maximum.");
            alert.showAndWait();
            throw new Exception();
        }

        if (companyName.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Company name field is blank.");
            alert.showAndWait();
            throw new NullPointerException();
        }
        return false;
    }

    /**
     * Validates parts according to specified logical instructions.
     * @param name name of part
     * @param stock inventory level
     * @param max max inventory level
     * @param min  min inventory level
     * @return status of validation.
     */
    public boolean validateInHouse(String name, int stock, int max, int min, int machineID) throws Exception {

        if (name.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Name field is blank.");
            alert.showAndWait();
            throw new NullPointerException();
        }

        if (min <= 0 || min >= max || stock < min || stock > max) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Stock minimum must be more than zero and less than stock maximum.");
            alert.showAndWait();
            throw new Exception();
        }

        if (machineID == 0) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Company name field is blank.");
            alert.showAndWait();
            throw new NullPointerException();
        }
        return false;
    }

    /**
     * Save method which creates a new part using information entered by the user.
     * @param event user clicks 'Save' button.
     * @throws IOException
     */
    @FXML
    private void onActionSave(ActionEvent event) throws Exception {

        try {
            int id = generatePartID();
            String name = PartsNameField.getText();
            int stock = Integer.parseInt(PartsInventoryField.getText());
            double price = Double.parseDouble(PartsPriceField.getText());
            int max = Integer.parseInt(PartsMaxField.getText());
            int min = Integer.parseInt(PartsMinField.getText());

            if (InHouseRadio.isSelected()) {

                isInHouse = true;
                PartLabelName.setText("Machine ID");

                int machineID = Integer.parseInt(PartsMachineIDField.getText());

                if (!validateInHouse(name, stock, max, min, machineID)) {
                    Inventory.addPart(new InHousePart(id, name, price, stock, min, max, machineID));
                }

            } else if (OutSourcedRadio.isSelected()) {

                isInHouse = false;
                PartLabelName.setText("Company Name");

                String companyName = PartsMachineIDField.getText();

                if (!validateOutsourced(name, stock, max, min, companyName)) {
                    Inventory.addPart(new OutsourcedPart(id, name, price, stock, min, max, companyName));
                }

            }  else if (!InHouseRadio.isSelected() || !OutSourcedRadio.isSelected()) {
                Alert alert = new Alert(Alert.AlertType.ERROR);
                alert.setContentText("Must choose part sourcing (in-house or outsourced).");
                alert.show();
            }

            stage = (Stage) ((Button) event.getSource()).getScene().getWindow();
            scene = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/Views/MainScreen.fxml")));
            stage.setScene(new Scene(scene));
            stage.show();

        } catch (NumberFormatException numberFormatException) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Illegal number format. Please review your entry and try again.");
            alert.showAndWait();
        } catch (NullPointerException nullPointerException) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("A field is blank. Please try again.");
            alert.showAndWait();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Invalid inventory. Please try again.");
            alert.showAndWait();
        }
    }

    /**
     * @param event user clicks 'Cancel' button
     * @throws IOException
     */
    @FXML
    void onActionCancel(ActionEvent event) throws IOException {
        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/Views/MainScreen.fxml")));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /**
     * Generates random part ID and disables the ID text field.
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {
        generatePartID();
        idDisabled();
    }
}
