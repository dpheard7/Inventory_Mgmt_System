package Controllers;

import Model.Product;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.event.ActionEvent;

import java.io.IOException;
import java.util.Objects;
import java.util.Optional;
import java.util.Random;

import Model.Inventory;
import Model.Part;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;

import java.net.URL;
import java.util.ResourceBundle;

/**
 * Class to control Add Product form and functions.
 */
public class AddProduct implements Initializable {

    Stage stage;
    Parent scene;

    private ObservableList<Part> associatedParts = FXCollections.observableArrayList();

    Random randomID = new Random();
    boolean productMatch = true;

    @FXML
    private TextField AddProductIDField;
    @FXML
    private TextField AddProductNameField;
    @FXML
    private TextField AddProductInventoryField;
    @FXML
    private TextField AddProductPriceField;
    @FXML
    private TextField AddProductMaxField;
    @FXML
    private TextField AddProductMinField;
    @FXML
    private TextField AddProductSearchField;
    @FXML
    private TableView<Part> AddProductPartsTable;
    @FXML
    private TableColumn<Part, Integer> AddProductPartID;
    @FXML
    private TableColumn<Part, String> AddProductPartName;
    @FXML
    private TableColumn<Part, Integer> AddProductPartInventory;
    @FXML
    private TableColumn<Part, Double> AddProductPartCost;
    @FXML
    private TableView<Part> AssociatedPartsTable;
    @FXML
    private TableColumn<Part, Integer> AssociatedPartID;
    @FXML
    private TableColumn<Part, String> AssociatedPartName;
    @FXML
    private TableColumn<Part, Integer> AssociatedPartInventory;
    @FXML
    private TableColumn<Part, Double> AssociatedPartCost;

    /**
     * Disables Parts ID field since IDs will be generated by the program itself
     */
    private void idDisabled() {
        AddProductIDField.setEditable(false);
    }

    /**
     * Generates random 2-digit product number
     *
     * @return method returns random 2-digit product number.
     */
    private int generateProductID() {
        int randomProductID;
        randomProductID = 1 + randomID.nextInt(99);
        for (Part part : Inventory.getAllParts()) {
            if (part.getId() == randomProductID) {
                productMatch = true;
                generateProductID();
            }
        }
        return randomProductID;
    }

    /**
     * Method to search parts.
     *
     * @param event part search.
     */
    @FXML
    void onActionAddProductSearchField(ActionEvent event) {

        ObservableList<Part> allParts = Inventory.getAllParts();
        ObservableList<Part> filteredParts = FXCollections.observableArrayList();
        String partSearchString = AddProductSearchField.getText();

        for (Part part : allParts) {

            if (part.getName().toLowerCase().contains(partSearchString.toLowerCase()) || String.valueOf(part.getId()).contains(partSearchString)) {
                filteredParts.add(part);
            }
        }

        if (filteredParts.size() == 0) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Part not found. Please try again.");
            alert.showAndWait();
        }
        AddProductPartsTable.setItems(filteredParts);
    }

    /**
     * Removes part associated with selected product.
     * @param event delete associated part action.
     */
    @FXML
    void OnActionDeleteAssociatedPart(ActionEvent event) {

        Part productToDelete = AssociatedPartsTable.getSelectionModel().getSelectedItem();

        if (AssociatedPartsTable.getSelectionModel().getSelectedItem() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("No item selected.");
            alert.setContentText("Don't forget to select an item to delete!");
            alert.show();
        }

        Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
        alert.setTitle("Confirm delete");
        alert.setContentText("Are you sure you want to delete product: " + productToDelete.getName() + "?");
        Optional<ButtonType> confirm = alert.showAndWait();
        if(confirm.get() == ButtonType.OK) {
            AssociatedPartsTable.getItems().remove(productToDelete);
        }
    }

    /**
     * Adds part associated with current product addition.
     * @param event action to add associated product.
     */
    @FXML
    void onActionAddAssocPart(ActionEvent event) {

        Part addNewAssociatedPart = AddProductPartsTable.getSelectionModel().getSelectedItem();

        if (AddProductPartsTable.getSelectionModel().getSelectedItem() == null) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("No item selected.");
            alert.setContentText("Don't forget to select an item to associate!");
            alert.show();
        } else {
            associatedParts.add(addNewAssociatedPart);
        }
        // AssociatedPartsTable.setItems(associatedParts);
    }

    /**
     * Cancels current action and switches back to Main Screen.
     * @param event user clicks 'Cancel' button.
     */
    @FXML
    void onActionCancel(ActionEvent event) throws IOException {
        stage = (Stage)((Button)event.getSource()).getScene().getWindow();
        scene = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/Views/MainScreen.fxml")));
        stage.setScene(new Scene(scene));
        stage.show();
    }

    /**
     *
     * @param name
     * @param stock
     * @param max
     * @param min
     * @return status of validation.
     * @throws Exception
     */
    public boolean validateProduct(String name, int stock, int max, int min) throws Exception {

        if (name.isEmpty()) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Name field is blank.");
            alert.showAndWait();
            throw new NullPointerException();
        }

        if (min <= 0 || min >= max || stock < min || stock > max) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Stock minimum must be more than zero and less than stock maximum.");
            alert.showAndWait();
            throw new Exception();
        }
        return true;
    }

    /**
     * Save method which creates a new product using information entered by the user.
     * @param event user clicks 'Save' button.
     * @throws IOException
     */
    @FXML
    void onActionSave(ActionEvent event) throws Exception {

        try {
            int id = generateProductID();
            String name = AddProductNameField.getText();
            int stock = Integer.parseInt(AddProductInventoryField.getText());
            double price = Double.parseDouble(AddProductPriceField.getText());
            int max = Integer.parseInt(AddProductMaxField.getText());
            int min = Integer.parseInt(AddProductMinField.getText());

            if (validateProduct(name, stock, max, min)) {

                Product product = new Product(id, name, price, stock, min, max);
                product.setAllAssociatedParts(associatedParts);

                /* for (Part part : associatedParts) {
                    product.addAssociatedPart(part);
                } */

                Inventory.addProduct(product);
            }

            stage = (Stage)((Button)event.getSource()).getScene().getWindow();
            scene = FXMLLoader.load(Objects.requireNonNull(getClass().getResource("/Views/MainScreen.fxml")));
            stage.setScene(new Scene(scene));
            stage.show();

        } catch (NumberFormatException numberFormatException) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Illegal number format. Please review your entry and try again.");
            alert.showAndWait();
        } catch (NullPointerException nullPointerException) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("A field is blank. Please try again.");
            alert.showAndWait();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setContentText("Invalid inventory. Please try again.");
            alert.showAndWait();
        }

    }



    /**
     * Generates random product ID and disables the product ID text field.
     * @param url
     * @param resourceBundle
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        generateProductID();
        idDisabled();

        AddProductPartsTable.setItems(Inventory.getAllParts());
        AddProductPartID.setCellValueFactory(new PropertyValueFactory<>("id"));
        AddProductPartName.setCellValueFactory(new PropertyValueFactory<>("name"));
        AddProductPartCost.setCellValueFactory(new PropertyValueFactory<>("price"));
        AddProductPartInventory.setCellValueFactory(new PropertyValueFactory<>("stock"));

        AssociatedPartsTable.setItems(associatedParts);
        AssociatedPartID.setCellValueFactory(new PropertyValueFactory<>("id"));
        AssociatedPartName.setCellValueFactory(new PropertyValueFactory<>("name"));
        AssociatedPartCost.setCellValueFactory(new PropertyValueFactory<>("price"));
        AssociatedPartInventory.setCellValueFactory(new PropertyValueFactory<>("stock"));
    }
}



